/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.warburg.infektion

import com.warburg.infektion.simulation.*
import com.warburg.infektion.simulation.listeners.InfectionTrackingListener
import com.warburg.infektion.simulation.listeners.Style
import com.warburg.infektion.simulation.listeners.TracingListener
import com.warburg.infektion.simulation.listeners.splatToGraphvizOnDesktop
import com.warburg.infektion.stats.*
import org.junit.Test
import java.time.Duration
import java.util.*


class SimTest {
    val thePlague =
        SIRDiseaseModel(NormalDurationDistribution(Duration.ofDays(10), Duration.ofDays(2)), 0.2) { host, timeInfected, context ->
            val ratePerDay = when {
                host.infectionState != InfectionState.Infected -> 0.0
                host.citizen.age >= 50 && timeInfected > Duration.ofDays(7) -> 0.15
                host.citizen.age >= 25 && timeInfected > Duration.ofDays(7) -> 0.10
                host.citizen.age >= 20 && timeInfected > Duration.ofDays(7) -> 0.05
                else -> 0.0
            }
            ratePerDay / 24
        }
    val ericAndIngridsApartment = loc("Eric and Ingrid's Apartment", LocationType.Home)
    val irvingAndGabysApartment = loc("Irving and Gaby's Apartment", LocationType.Home)
    val workdayYP = loc("WorkdayYP", LocationType.Work)
    val workdayWSF = loc("WorkdayWSF", LocationType.Work)
    val nasa = loc("NASA", LocationType.Work)
    val eric = cit("Eric", 28, Sex.Male)

    val ericAndIngridSchedules = mapOf(
        eric to work9to5(ericAndIngridsApartment, workdayYP),
        cit("Ingrid", 28, Sex.Female) to work9to5(ericAndIngridsApartment, nasa),
        cit("Irving", 29, Sex.Male) to work9to5(irvingAndGabysApartment, workdayYP),
        cit("Gaby", 29, Sex.Female) to work9to5(irvingAndGabysApartment, workdayWSF),
        schedule("Dylan", 29, Sex.Male, workdayWSF),
        schedule("Matt B", 29, Sex.Male, workdayWSF),
        schedule("Maggie W", 45, Sex.Female, workdayYP),
        schedule("Brady", 39, Sex.Male, workdayYP),
        schedule("Maggie D", 24, Sex.Male, workdayYP),
        schedule("Joe", 70, Sex.Male, nasa),
        schedule("Luke", 40, Sex.Male, nasa),
        schedule("Brian", 53, Sex.Male, nasa)
    )

    private val random: Random = Random(1)

    @Test
    fun `eric and ingrid go to work`() {
        val infectionTracker = InfectionTrackingListener.create()
        val schedules = ericAndIngridSchedules
        val initialInfections = setOf(eric.id)
        val diseaseModel = thePlague
        val sim = makeSim(schedules, diseaseModel, initialInfections, this.random, infectionTracker, TracingListener.create(perf = false))

        sim.runFor(Duration.ofDays(21))

        splatToGraphvizOnDesktop(infectionTracker, style = Style.Circle)
    }

    enum class HouseholdType {
        SingleYoungAdult,
        GroupYoungAdult,
        CoupleYoungAdult,
        CoupleWithChildren,
        CoupleAdult,
        SingleAdult,
        ElderlyCouple,
        ElderlySingle,
        GroupElderly
    }

    @Test
    fun `big pop-uh`() {
        val infectionTracker = InfectionTrackingListener.create()
        val schedules = makeSchedules(
            PopulationModel(
                numPeople = 1000,
                ageBins = listOf(
                    AgeBracket.Child     to 20.percent(),
                    AgeBracket.Teenager  to 10.percent(),
                    AgeBracket.Adult     to 30.percent(),
                    AgeBracket.MiddleAge to 30.percent(),
                    AgeBracket.Elderly   to 10.percent()
                ),
                numWorkplaces = 100,
                employmentRate = RateDistribution(95.percent()),
                workingAge = (18 to 66).asHalfOpen(),
                childrenPerCouple = NormalDistribution(1.0, 1.0)
            ),
            random = this.random
        )
        val initialInfections = initalInfections(schedules.keys, 10, this.random)
        val sim = makeSim(schedules, this.thePlague, initialInfections, this.random, infectionTracker)

        sim.runFor(Duration.ofDays(21))

        splatToGraphvizOnDesktop(infectionTracker, Style.Point)
    }

}


